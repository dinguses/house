<?xml version="1.0" encoding="UTF-8"?>
<house>
  <!-- CURRENT, WORKING EXAMPLES-->

  <!--STATES-->
  <states name="state set 1">
    <state name="first" desc="attribute description" />
    <!-- Default-->
    <state name="second">Description can go here too.</state>
    <state desc="or the name can go inside the element">Confusing State</state>
    <!--Or, even fancier: -->
    <StateName>
      <desc>That's right, just use the node name. Boom.</desc>
      <desc>Oh, also, descriptions can be inside an element.</desc>
      <desc>They can even be multiple lines!</desc>
    </StateName>
  </states>
  <!--That state set has no explicit default, so the first state ("first") is the default.-->
  <!--You can do:-->
  <states name="state set 2">
    <first desc="foo" />
    <second desc="bar" />
    <third desc="dingus" default="" />
    <!--This is the default-->
  </states>
  <!-- or...-->
  <states default="second" name="state set 3">
    <first desc="foo" />
    <second desc="bar" />
    <!--This is the default-->
    <third desc="dingus" />
  </states>
  <!-- The behavior if you mix them is undefined. -->

  <item name="safe">
    <states default="Locked">
      <state img="safe_locked">Locked</state>
      <state img="safe_open">Open</state>
    </states>
    <actions>

      <!--An action that happens in only one state.-->
      <action state="Locked" name="look">It's locked. You'll need a key and combination.</action>
      <!-- same naming rules as states.-->
      <!-- You can have multiple actions of the same name, if they have different -->
      <!-- Prereqs. The first matching one will always take precedence. -->
      <look state="Open" desc="Inside is a gun" />

      <action name="hit" desc="That hurt your hand. Why did you do that?">
        <!--Actions can work in multiple states. Think of it as an OR when used this way.-->
        <!--This is because objects can only have one state.-->
        <!--Items work a bit differently, see below.-->
        <state name="Locked" />
        <state name="Unlocked" />
      </action>

      <action name="unlock" state="Locked" to_state="Open">
        <items need="AND">
          <!--Can specify that you need both or either.-->
          <item>Key</item>
          <item>Combination Note</item>
        </items>
        <desc>You unlock the safe.</desc>
      </action>

      <action state="Open" name="plunder">
        <desc>You retrieve the gun from the safe.</desc>
        <desc>It's not loaded, drat!</desc>
        <!-- This is how you get items as a result of an action. -->
        <getitem name="gun" state="unloaded" />
      </action>

      <!-- This is the same as the above action, -->
      <!-- but the outcome happens randomly, 50% of the time. -->
      <action state="Open" name="plunder" rand="0.5">
        <desc>You retrieve the gun from the safe.</desc>
        <desc>It's not loaded, but at least there's ammo in there!</desc>
        <!-- This is how you get multiple items as a result of an action. -->
        <getitem>
          <item name="gun" state="unloaded" />
          <item name="magazine" state="full" />
        </getitem>
      </action>

      <!-- Some actions can be hidden. They won't show up in help. -->
      <!-- Since it's lacking a state, it works in any state. -->
      <action name="lick" hidden="yes">
        <desc>It tastes like metal.</desc>
        <!-- Events can be invoked from certain actions.-->
        <!-- They'll be passed certain info, like the state, name, and room of the object. -->
        <invoke name="ObjectLicked" />
      </action>

      <!-- With evalonce, randomness is checked *once*, not each time you invoke. -->
      <!-- This isn't needed for actions that transition away from the state needed, -->
      <!-- since you can't do that action anymore anyway. -->
      <action name="lick" hidden="yes" rand="0.3" evalonce="all">
        <desc>You feel an electrical shock. It tastes like citrus and pain.</desc>
        <invoke name="ObjectLicked" />
      </action>

      <!-- In summary, RULES FOR ACTION RESOLUTION AS FOLLOWS:
      1. Get object actions of given name.
        1a. Filter out those who specify a state, and don't match the current state
        1b. Filter out those that require items we don't have
      2. If there are multiple still left...
        2a. If any have a "rand" attribute AND this action hasn't been resolved before
          2a1. get a random number for each one, see if it's less than the rand value.
            2a1a. if it is, do this action. If it's evalonce=all, set it as the "sticky action for this state + action name combo"
            2a1b. if it isn't, go to the next one. If it's evalonce=this, permanently lock this one out.
          2a2. if there's none left, and the rands are hidden, give a hint based off of the first state+item req.
        2b. Otherwise, pick the first one.
      3. If there are none, say "you can't do that to this object".
      -->
    </actions>
  </item>
  <rooms>
    <room name = "Living Room" id="0">
      <adjacent>
        <id>1</id>
        <id>2</id>
      </adjacent>
      <states>
        <state>
          <description>It’s a living room, or is it a dead room?</description>
        </state>
        <state>
          <description>It’s a dead room, or is it a living room?</description>
        </state>
      </states>
      <items>
        <item name = "Key" available = "true">Congrats, you got the key</item>
      </items>
    </room>
    <room name = "Kitchen" id="1">
      <adjacent>
        <id>0</id>
        <id>4</id>
        <id>7</id>
      </adjacent>
      <states>
        <state>
          <description>the sink is dripping, the murderer is behind you</description>
        </state>
        <state>
          <description>You're feeling hungry, but there's no food around. Maybe the murderer ate it all</description>
        </state>
      </states>
      <items>
        <item name = "Safe" status = "closed">
          <state name = "closed"></state>
        </item>
      </items>
    </room>
    <room name = "Porch" id="2">
      <adjacent>
        <id>0</id>
      </adjacent>
      <states>
        <state>
          <description>Going out for some fresh air you decide to smoke</description>
        </state>
        <state>
          <description>You've smoked enough  for one day</description>
        </state>
      </states>
    </room>
    <room name = "Bathroom" id="3">
      <adjacent>
        <id>4</id>
      </adjacent>
      <states>
        <state>
          <description>the murderer is in the toilet taking a poop, you hear it</description>
        </state>
        <state>
          <description>Regardless of how you smell, now's not really a good time for a bath</description>
        </state>
      </states>
    </room>
    <room name = "Hallway" id="4">
      <adjacent>
        <id>1</id>
        <id>3</id>
        <id>6</id>
      </adjacent>
      <states>
        <state>
          <description>You've made it to the hallway</description>
        </state>
        <state>
          <description>It's the hallway again</description>
        </state>
      </states>
    </room>
    <room name = "Closet" id="5">
      <adjacent>
        <id>6</id>
      </adjacent>
      <states>
        <state>
          <description>You found the closet, good job!</description>
        </state>
        <state>
          <description>Maybe one day you'll have the courage to come out of the closet</description>
        </state>
      </states>
    </room>
    <room name = "Bedroom" id="6">
      <adjacent>
        <id>4</id>
      </adjacent>
      <states>
        <state>
          <description>You could go for a nice nap, better sleep with one eye open though</description>
        </state>
        <state>
          <description>The stories this room could tell are non-existent</description>
        </state>
      </states>
    </room>
    <room name = "Basement" id="7">
      <adjacent>
        <id>1</id>
      </adjacent>
      <states>
        <state>
          <description>It's a basement, kind of shitty, ain't it?</description>
        </state>
        <state>
          <description>It's dark down here, you should probably bring a fleshlig... er, I mean flashlight</description>
        </state>
      </states>
    </room>
  </rooms>
</house>
